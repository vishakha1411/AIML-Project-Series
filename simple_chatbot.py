# -*- coding: utf-8 -*-
"""simple chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VR6p2SP3PYgpavZZj3RwwLJrMWHGlByb
"""

import difflib
import random
class SimpleChatbot:
    def __init__(self):
        self.context = {}

    def greet(self):
        return "Bot:Hello! I'm your friendly chatbot. How can I help you today?"

    def farewell(self):
        return "Goodbye! Have a great day!"

    def handle_input(self, user_input):
        responses = {
            "how are you?": "I'm just a bunch of code, but I'm doing great! How about you?",
            "what is your name?": "I'm ChatBot, your friendly assistant.",
            "what can you do?": "I can chat with you, remember things, and help you with basic tasks.",
            "tell me a joke": "Why don't scientists trust atoms? Because they make up everything!",
            "thank you": "You're welcome!",
            "i love you": "love you too!"

        }
        user_input = user_input.lower()
        if user_input in responses:
            return responses[user_input]
        elif self.check_context(user_input):
            return self.check_context(user_input)
        elif user_input.lower() in ["ask","lets know each other","you can ask me anything"]:
            return self.ask_questions()
        else:
            return self.error_response()

    def ask_questions(self):
        questions = [
            "What's your name?",
            "How old are you?",
            "What do you like to do for fun?"
        ]
        qtostore=["your name :","your age :","you like to do for fun :"]
        answers = {}
        for idx,question in enumerate(questions):
            print("Bot: ",question)
            answer = input("you: ")
            answers[qtostore[idx]] = answer
        print("Bot: Great!")
        self.context.update(answers)

    def check_context(self, user_input):
        # Use difflib to find the closest matching key in context
        close_matches = difflib.get_close_matches(user_input, self.context.keys(), n=1, cutoff=0.5)
        if close_matches:
            return f"Bot: You mentioned before: {close_matches[0]} {self.context[close_matches[0]]}"
        return None

    def recall_context(self):
        if not self.context:
            return "We haven't talked much yet."
        else:
            return "Here's what I remember about you: " + ", ".join([f"{k} {v}" for k, v in self.context.items()])

    def error_response(self):
        response = ["Could you please re-phrase that? ",
                    "Sounds about right.",
                    "What does that mean?"][
            random.randrange(3)]
        return response

    def chat(self):
        print(self.greet())
        while True:
            user_input = input("you: ")
            if any(word in ["bye", "exit", "quit"] for word in user_input.lower().split()):
                print(self.farewell())
                break
            elif user_input.lower() == "recall":
                print(self.recall_context())
            else:
                print(self.handle_input(user_input))

# Initialize chatbot
chatbot = SimpleChatbot()
chatbot.chat()

